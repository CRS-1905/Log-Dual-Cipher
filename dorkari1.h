const unsigned int c=0b100011011;

const unsigned char e[256]={0x1,0x11,0x1a,0xa1,0x5f,0xd8,0xf7,0x1e,0xe5,0x37,0x6a,0x90,0x53,0x14,0x4f,0xd3,0x4c,0xe0,0x62,0x18,0x83,0x6b,0x81,0x49,0xb5,0x10,0xb,0xbb,0xfe,0x87,0x2f,0xe9,0xfb,0xd2,0x5d,0xfa,0xc3,0x47,0x5b,0x9c,0x9f,0xac,0x82,0x7a,0x9b,0xe8,0xea,0xc8,0xfc,0xa5,0x1b,0xb0,0x45,0x79,0xa8,0xc6,0x12,0x29,0x8f,0xa7,0x39,0x84,0x1c,0xc7,0x3,0x33,0x2e,0xf8,0xe1,0x73,0x2,0x22,0x34,0x59,0xbe,0xab,0xf5,0x3c,0xd1,0x6e,0xd4,0x3b,0xa6,0x28,0x9e,0xbd,0x98,0xdb,0xc4,0x30,0x1d,0xd6,0x19,0x92,0x71,0x20,0x16,0x6d,0xe7,0x15,0x5e,0xc9,0xed,0xbf,0xba,0xef,0x9d,0x8e,0xb6,0x23,0x25,0x43,0x1f,0xf4,0x2d,0xcb,0xcf,0x8b,0xe3,0x51,0x36,0x7b,0x8a,0xf2,0x4b,0x97,0x24,0x52,0x5,0x55,0x72,0x13,0x38,0x95,0x6,0x66,0x5c,0xeb,0xd9,0xe6,0x4,0x44,0x68,0xb2,0x67,0x4d,0xf1,0x78,0xb9,0xdc,0xb3,0x76,0x57,0x50,0x27,0x61,0x2b,0xad,0x93,0x60,0x3a,0xb7,0x32,0x3f,0xe2,0x40,0x2c,0xda,0xd5,0x2a,0xbc,0x89,0xc1,0x65,0x6f,0xc5,0x21,0x7,0x77,0x46,0x4a,0x86,0x3e,0xf3,0x5a,0x8d,0x85,0xd,0xdd,0xa2,0x6c,0xf6,0xf,0xff,0x96,0x35,0x48,0xa4,0xa,0xaa,0xe4,0x26,0x70,0x31,0xc,0xcc,0xb8,0xcd,0xa9,0xd7,0x8,0x88,0xd0,0x7f,0xce,0x9a,0xf9,0xf0,0x69,0xa3,0x7d,0xec,0xae,0xa0,0x4e,0xc2,0x56,0x41,0x3d,0xc0,0x74,0x75,0x64,0x7e,0xdf,0x80,0x58,0xaf,0xb1,0x54,0x63,0x9,0x99,0xca,0xde,0x91,0x42,0xe,0xee,0x8c,0x94,0x17,0x7c,0xfd,0xb4,0x0};

const unsigned char Log[256]={0xff,0x0,0x46,0x40,0x8c,0x80,0x86,0xb1,0xd2,0xf1,0xc6,0x1a,0xcc,0xbb,0xf7,0xc0,0x19,0x1,0x38,0x83,0xd,0x63,0x60,0xfb,0x13,0x5c,0x2,0x32,0x3e,0x5a,0x7,0x70,0x5f,0xb0,0x47,0x6d,0x7e,0x6e,0xc9,0x9a,0x53,0x39,0xa9,0x9c,0xa6,0x72,0x42,0x1e,0x59,0xcb,0xa2,0x41,0x48,0xc3,0x78,0x9,0x84,0x3c,0xa0,0x51,0x4d,0xe4,0xb6,0xa3,0xa5,0xe3,0xf6,0x6f,0x8d,0x34,0xb3,0x25,0xc4,0x17,0xb4,0x7c,0x10,0x91,0xe0,0xe,0x99,0x77,0x7f,0xc,0xef,0x81,0xe2,0x98,0xec,0x49,0xb8,0x26,0x88,0x22,0x64,0x4,0x9f,0x9b,0x12,0xf0,0xe8,0xad,0x87,0x90,0x8e,0xda,0xa,0x15,0xbe,0x61,0x4f,0xae,0xca,0x5e,0x82,0x45,0xe6,0xe7,0x97,0xb2,0x93,0x35,0x2b,0x79,0xfc,0xdc,0xe9,0xd5,0xeb,0x16,0x2a,0x14,0x3d,0xba,0xb5,0x1d,0xd3,0xab,0x7a,0x75,0xf9,0xb9,0x6b,0x3a,0xb,0xf5,0x5d,0x9e,0xfa,0x85,0xc2,0x7d,0x56,0xf2,0xd7,0x2c,0x27,0x6a,0x54,0x28,0xdf,0x3,0xbd,0xdb,0xc5,0x31,0x52,0x3b,0x36,0xd0,0xc7,0x4b,0x29,0x9d,0xde,0xed,0x33,0xee,0x8f,0x96,0xfe,0x18,0x6c,0xa1,0xce,0x94,0x68,0x1b,0xaa,0x55,0x4a,0x67,0xe5,0xac,0xe1,0x24,0x58,0xaf,0x37,0x3f,0x2f,0x65,0xf3,0x73,0xcd,0xcf,0xd6,0x74,0xd4,0x4e,0x21,0xf,0x50,0xa8,0x5b,0xd1,0x5,0x8a,0xa7,0x57,0x95,0xbc,0xf4,0xea,0x11,0x44,0xa4,0x76,0xc8,0x8,0x8b,0x62,0x2d,0x1f,0x2e,0x89,0xdd,0x66,0xf8,0x69,0xd9,0x92,0x7b,0xb7,0x71,0x4c,0xbf,0x6,0x43,0xd8,0x23,0x20,0x30,0xfd,0x1c,0xc1};

const unsigned char T[256]={0xff,0x19,0x32,0xdf,0x64,0x8a,0xbf,0x70,0xc8,0x78,0x15,0xf5,0x7f,0x63,0xe0,0x21,0x91,0x44,0xf0,0x5c,0x2a,0xa,0xeb,0xc4,0xfe,0x1,0xc6,0x68,0xc1,0xb5,0x42,0x2d,0x23,0xf,0x88,0x20,0xe1,0xb3,0xb8,0x6a,0x54,0x9d,0x14,0x79,0xd7,0x1f,0x89,0x65,0xfd,0xc5,0x2,0xee,0x8d,0x93,0xd0,0x3f,0x83,0x53,0x6b,0x52,0x84,0xba,0x5a,0x37,0x46,0xa2,0x1e,0xd8,0x11,0x82,0x40,0x6d,0xc3,0xec,0x67,0xc7,0x71,0xe4,0xd4,0xae,0xa8,0xa0,0x3b,0x39,0x28,0xaa,0xf2,0xa7,0xaf,0xcb,0x3e,0xd1,0x13,0x9e,0xca,0xb0,0xfb,0xbe,0x8b,0xd,0x4,0x2f,0xdd,0x4a,0x1b,0xf8,0x27,0x3a,0xa1,0x47,0x7e,0xf6,0x7,0x4c,0xa6,0xf3,0xd6,0x7a,0xa4,0x99,0x9,0x2b,0x75,0xb7,0xb4,0xc2,0x6e,0xc,0x8c,0xef,0x45,0x38,0x3c,0xfa,0xb1,0x90,0x22,0x2e,0x5,0x62,0x80,0x34,0xda,0x96,0x87,0x10,0xd9,0x35,0xce,0xbc,0x8f,0xb2,0xe2,0x77,0xc9,0x9f,0xa9,0x29,0x5d,0x9b,0x51,0x6c,0x41,0xb6,0x76,0xe3,0x72,0x57,0x50,0x9c,0x55,0xd3,0xe5,0xe8,0x4f,0x58,0x5f,0x86,0x97,0x25,0x7c,0x1d,0xa3,0x7b,0x26,0xf9,0x3d,0xcc,0x95,0xdb,0x61,0x6,0xf7,0x1c,0x7d,0x48,0x17,0x31,0x1a,0x4b,0x8,0x9a,0x5e,0x59,0xbb,0xcf,0x94,0xcd,0x36,0x5b,0xf1,0xab,0x4e,0xe9,0x74,0x2c,0x43,0x92,0x8e,0xbd,0xfc,0x66,0xed,0x3,0xe,0x24,0x98,0xa5,0x4d,0xac,0xe7,0xe6,0xad,0xd5,0xf4,0x16,0x49,0xde,0x33,0x81,0x12,0xd2,0x56,0x73,0xea,0xb,0x6f,0xc0,0x69,0xb9,0x85,0x60,0xdc,0x30,0x18,0x0};

const unsigned char S_Box[256]={0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x1,0x67,0x2b,0xfe,0xd7,0xab,0x76,0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,0x4,0xc7,0x23,0xc3,0x18,0x96,0x5,0x9a,0x7,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,0x9,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,0x53,0xd1,0x0,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x2,0x7f,0x50,0x3c,0x9f,0xa8,0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,0xcd,0xc,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0xb,0xdb,0xe0,0x32,0x3a,0xa,0x49,0x6,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x8,0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,0x70,0x3e,0xb5,0x66,0x48,0x3,0xf6,0xe,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,0x8c,0xa1,0x89,0xd,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0xf,0xb0,0x54,0xbb,0x16};

const unsigned inv_S[256]={0xf1,0x76,0x6f,0x92,0x3d,0x72,0xc9,0x1f,0xa9,0x8f,0xec,0xc2,0x99,0x2c,0x5d,0xd0,0x22,0xdf,0x4b,0x48,0xe3,0x80,0xf5,0xc5,0x21,0xfc,0x54,0x1c,0xcc,0x2e,0xe0,0x89,0xf0,0xd5,0xb9,0xd,0x41,0x60,0x98,0x3e,0x4f,0xc7,0x1,0x55,0x2d,0x2f,0x1b,0xee,0x81,0x39,0x8d,0x30,0x8e,0xed,0xae,0x3f,0x3c,0x10,0x45,0xab,0x26,0xe,0x58,0xcb,0xa8,0x87,0x24,0x44,0x11,0x3a,0xa,0xfa,0x53,0x63,0xb8,0xf7,0xb2,0x61,0x77,0x34,0x5c,0x17,0xaf,0xf8,0xea,0xcf,0xa4,0x28,0xd3,0xd2,0xf4,0xb4,0x6b,0xe6,0xa6,0xef,0xc1,0x96,0x33,0x1e,0x6a,0x38,0xc,0x71,0xe5,0x9b,0xe7,0x8b,0x35,0xa2,0xe1,0xe8,0x73,0x68,0x23,0x49,0x4,0xd6,0x91,0xca,0x7e,0x40,0x74,0x8c,0xcd,0xba,0x52,0xc4,0x78,0x66,0x7,0x2a,0x97,0x9d,0x31,0xf,0x3b,0x4d,0x8,0x4c,0x59,0xb5,0x6,0xb6,0xc6,0xad,0x9c,0xac,0x57,0x9e,0x7c,0xc0,0xa7,0xbe,0xe4,0x5,0x1a,0x13,0x47,0xb,0xbd,0x5f,0x3,0x6e,0x51,0x82,0xf6,0x2b,0x18,0x85,0x93,0x7b,0xbc,0xaa,0x86,0xb1,0x79,0x84,0x46,0x56,0x88,0x95,0x4e,0xe9,0xb3,0xfe,0x90,0xb7,0x65,0x2,0xce,0x5b,0x20,0xdc,0xc3,0x8a,0x50,0x5a,0xdb,0x12,0xde,0x6d,0xd4,0x42,0x16,0x9a,0xd7,0xeb,0xa1,0xbb,0x67,0x7d,0x9f,0x15,0xdd,0x9,0xda,0xfb,0xc8,0x5e,0x83,0x14,0x4a,0x25,0x6c,0x36,0x94,0x43,0x75,0x70,0xf3,0xa3,0xf9,0x7a,0x69,0xa0,0x64,0x32,0xe2,0xfd,0xff,0xa5,0xd8,0x19,0x27,0x29,0xbf,0xd1,0xf2,0xd9,0x62,0x1d,0x0,0xb0,0x37,0x7f};

void LogDual_aes_enc(unsigned char **s,unsigned char **w);
unsigned char log_xor(unsigned char,unsigned char);
unsigned char log_SubBytes(unsigned char i);
unsigned char mult(unsigned char a,unsigned char b);
unsigned char ele_in_field(unsigned int a);
unsigned int num_bit(unsigned int a);
void shift(unsigned char **s);
void Mix_Column(unsigned char **s);
unsigned char log_mult(unsigned char,unsigned char);
void Add_Round_Key(unsigned char **s,unsigned char **w,unsigned int k);
void KeySchedule(unsigned char **key,unsigned char **w);
void ROTWORD(unsigned char *a,unsigned int i);
void Sub_Word(unsigned char *a,unsigned int i);
unsigned char log_power(unsigned char i,unsigned char m);
void LogDual_aes_dec(unsigned char **s,unsigned char **w);
void inv_Shift_Rows(unsigned char **s);
void inv_Mix_Column(unsigned char **s);

void LogDual_aes_enc(unsigned char **s,unsigned char **w)
{
	unsigned int i,j,k;

	for(i=0;i<4;i++)
		for(j=0;j<4;j++)
			s[i][j]=log_xor(s[i][j],w[i][j]);

	for(k=1;k<=9;k++)
	{
		for(i=0;i<4;i++)
			for(j=0;j<4;j++)
				s[i][j]=log_SubBytes(s[i][j]);

		shift(s);
		
		Mix_Column(s);

		Add_Round_Key(s,w,k);

	}
	for(i=0;i<4;i++)
		for(j=0;j<4;j++)
			s[i][j]=log_SubBytes(s[i][j]);

	shift(s);
	
	Add_Round_Key(s,w,10);

}

unsigned char log_xor(unsigned char i,unsigned char j)
{
	unsigned char p;

	if(i==j)
		return 255;
	else
	{
		if(i==255)
			return j;
		if(j==255)
			return i;
		if(i>j)
		{
			p=(j+T[i-j])%255;
			return p;
		}
		if(j>i)
		{
			p=(i+T[j-i])%255;
			return p;
		}
		
	} 
}

unsigned char log_SubBytes(unsigned char i)
{
	unsigned char s;
	s=Log[S_Box[e[i]]];
	return s;
}

unsigned char mult(unsigned char a,unsigned char b)
{
	unsigned int i,s1=0;
	for(i=0;b!=0;i++)
	{
		if( (b&1) == 1 )
		{
			s1^=(a<<i);
		}
		b=b>>1;
		
	}
	
	return ele_in_field(s1);
}

unsigned char ele_in_field(unsigned int a)
{
	unsigned int n1,t=num_bit(a);
	
	if(t<9)
		return a;
	else
	{
		n1=t-9;
		a=ele_in_field(a^(c<<n1));
	}
}

unsigned int num_bit(unsigned int a)
{
	unsigned int s=0;
	if(a==0)
		return 1;
	while(a!=0)
	{
		a>>=1;
		s++;
	}
	return s;
}

void shift(unsigned char **s)
{
	unsigned char s1[4][4];
	unsigned int i,j;

	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			s1[i][j]=s[i][(j+i)%4];
		}
	}
	
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			s[i][j]=s1[i][j];
		}
	}
}

void Mix_Column(unsigned char **s)
{
	unsigned int i,j;
	unsigned char t[4],u[4];
	
	for(j=0;j<4;j++)
	{
		for(i=0;i<4;i++)
		{
			
			t[i]=s[i][j];
		}
		u[0]=log_xor(log_xor(log_mult(0x46,t[0]),log_mult(0x40,t[1])),log_xor(log_mult(0x0,t[2]),log_mult(0x0,t[3])));
		u[1]=log_xor(log_xor(log_mult(0x46,t[1]),log_mult(0x40,t[2])),log_xor(log_mult(0x0,t[3]),log_mult(0x0,t[0])));
		u[2]=log_xor(log_xor(log_mult(0x46,t[2]),log_mult(0x40,t[3])),log_xor(log_mult(0x0,t[0]),log_mult(0x0,t[1])));
		u[3]=log_xor(log_xor(log_mult(0x46,t[3]),log_mult(0x40,t[0])),log_xor(log_mult(0x0,t[1]),log_mult(0x0,t[2])));
		
		for(i=0;i<4;i++)
		{
			
			s[i][j]=u[i];
		}
	
	}
}

unsigned char log_mult(unsigned char i,unsigned char j)
{
	if(i==255||j==255)
		return 255;
	return((i+j)%255);
}

void Add_Round_Key(unsigned char **s,unsigned char **w,unsigned int k)
{
	unsigned int i,j;
	
	for(i=0;i<4;i++)
		for(j=0;j<4;j++)
			s[i][j]=log_xor(s[i][j],w[i][(4*k+j)]);
	
}

void KeySchedule(unsigned char **key,unsigned char **w)
{
	unsigned int i,j,k;
	unsigned char temp[4];
	unsigned int RCON[10]={0x00ffffff,0x46ffffff,0x8cffffff,0xd2ffffff,0x19ffffff,0x05ffffff,0xa5ffffff,0xebffffff,0x32ffffff,0x78ffffff};
	
	for(j=0;j<4;j++)
		for(i=0;i<4;i++)
			w[i][j]=key[i][j];
	
	for(j=4;j<44;j++)
	{
		for(i=0;i<4;i++)
			temp[i]=w[i][j-1];
		if((j%4)==0)
		{
			ROTWORD(temp,4);	
			Sub_Word(temp,4);
			temp[0]=log_xor(temp[0],((RCON[(j>>2)-1]>>24)&(0b11111111)));
			temp[1]=log_xor(temp[1],((RCON[(j>>2)-1]>>16)&(0b11111111)));
			temp[2]=log_xor(temp[2],((RCON[(j>>2)-1]>>8)&(0b11111111)));
			temp[3]=log_xor(temp[3],((RCON[(j>>2)-1]>>0)&(0b11111111)));
		}
		for(i=0;i<4;i++)
			w[i][j]=log_xor(w[i][j-4],temp[i]);
	}
}

void ROTWORD(unsigned char *a,unsigned int i)
{
	unsigned char b[i];
	unsigned int j;
	for(j=0;j<i;j++)
		b[j]=a[(j+1)%i];
	for(j=0;j<i;j++)
		a[j]=b[j];
	return;
}

void Sub_Word(unsigned char *a,unsigned int i)
{
	unsigned int j;
	for(j=0;j<i;j++)
		a[j]=log_SubBytes(a[j]);
	return;
}

unsigned char log_power(unsigned char i,unsigned char m)
{
	if(i==255)
		return 255;
	return((i*m)%255);
}

void LogDual_aes_dec(unsigned char **s,unsigned char **w)
{
	unsigned int i,j,k,k1=0;
	unsigned char dec[16];

	Add_Round_Key(s,w,10);
	inv_Shift_Rows(s);

	for(i=0;i<4;i++)
		for(j=0;j<4;j++)
			s[i][j]=inv_S[s[i][j]];
	
	for(k=1;k<=9;k++)
	{
		Add_Round_Key(s,w,10-k);
		inv_Mix_Column(s);
		inv_Shift_Rows(s);
		for(i=0;i<4;i++)
			for(j=0;j<4;j++)
				s[i][j]=inv_S[s[i][j]];
	}
	
	Add_Round_Key(s,w,0);

}

void inv_Shift_Rows(unsigned char **s)
{
	unsigned char s1[4][4];
	unsigned int i,j;

	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			s1[i][(j+i)%4]=s[i][j];
		}
	}
	
	for(i=0;i<4;i++)
	{
		for(j=0;j<4;j++)
		{
			s[i][j]=s1[i][j];
		}
	}
}


void inv_Mix_Column(unsigned char **s)
{
	unsigned int i,j;
	unsigned char t[4],u[4];
	
	for(j=0;j<4;j++){
		for(i=0;i<4;i++)
			t[i]=s[i][j];

		u[0]=log_xor(log_xor(log_mult(0xf7,t[0]),log_mult(0x1a,t[1])),log_xor(log_mult(0xbb,t[2]),log_mult(0xf1,t[3])));
		u[1]=log_xor(log_xor(log_mult(0xf7,t[1]),log_mult(0x1a,t[2])),log_xor(log_mult(0xbb,t[3]),log_mult(0xf1,t[0])));
		u[2]=log_xor(log_xor(log_mult(0xf7,t[2]),log_mult(0x1a,t[3])),log_xor(log_mult(0xbb,t[0]),log_mult(0xf1,t[1])));
		u[3]=log_xor(log_xor(log_mult(0xf7,t[3]),log_mult(0x1a,t[0])),log_xor(log_mult(0xbb,t[1]),log_mult(0xf1,t[2])));
		for(i=0;i<4;i++)
			s[i][j]=u[i];
	}
}
